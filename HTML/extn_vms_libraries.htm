<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<TITLE>Emacs OpenVMS Library Reference</TITLE>

<LINK REL="STYLESHEET" HREF="styles.css">
</HEAD>
<BODY>
<A name="top"></A> 

<H1><A name="libraryreference"></A>Emacs OpenVMS Library Reference</H1>

<HR>
<H2><A name="dclmode"></A>DCLMODE, A Mode for Writing DCL Command Procedures</H2>

<!--<P><I><B>DCLMODE, A Mode for Writing DCL Command Procedures </B></I> DCLMODE DCL-mode</P>-->
<P>The DCLMODE library defines functions to help write DCL command procedures. The library defines the function DCL-mode, which enables the DCL Mode major mode.</P>

<P>DCL-mode provides facilities for DCL comment handling and automatic indentation of DCL command lines.</P>

<HR>
<H2><A name="cms"></A>CMS, An Interface to DEC/CMS</H2>

<!--<P><I><B>CMS, An Interface to DEC/CMS </B></I> CMS DEC/CMS interface</P>-->
<P>The CMS library of functions provide an interface to the Code Management System (DEC/CMS) from within Emacs. The CMS library functions are analogous to their equivalents in the CMS application.</P>

<P>The functions are not bound to any keys by default. If you do want to bind the functions, create a file called CMS.KEY containing your bindings in your EMACS$PATH. The CMS library will load this file when you load the CMS library.</P>

<P>Most CMS library functions have an alternate form when passed a prefix argument: some commands will prompt for input in the Mini-buffer; others will display a form which you can fill in to modify the default action of the command. When you have completed the forms, use the exit-emacs command to execute the command. To abort the form, use the ^C command.</P>

<P>For more information on CMS libraries and the DEC/CMS layered product itself, see the OpenVMS DECset documentation for details.</P>

<P>The Emacs CMS interface functions are:</P>

<HR>
<P><B>(cms-set-library)</B></P>

<BLOCKQUOTE>
<P>Sets the current CMS library by translating the logical name CMS$LIB.</P>

<P>If provided a prefix argument, cms-set-library prompts for the name of the library in the Mini-buffer.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-show-library)</B></P>

<BLOCKQUOTE>
<P>Prints the name of the currently set CMS library in the Mini-buffer.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-show-elements)</B></P>

<BLOCKQUOTE>
<P>Lists the elements in the current CMS library in the buffer CMS list, which is popped onto the screen.</P>

<P>If a prefix argument is provided, a Show Elements form is popped onto the screen. The form contains the following fields:</P>

<P>&middot; Elements</P>

<P>&middot; Include groups flag (default is 1).</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-show-class)</B></P>

<BLOCKQUOTE>
<P>Lists the classes in the current CMS library in the CMS listbuffer which is popped onto the screen.</P>

<P>If passed a prefix argument, cms-show-class prompts for the class to list in the Mini-buffer.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-show-group)</B></P>

<BLOCKQUOTE>
<P>Lists the groups in the current CMS library in the CMS listbuffer which is popped onto the screen. If passed a prefix argument, cms-show-group prompts for the group to list in the Mini-buffer.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-show-reservation)</B></P>

<BLOCKQUOTE>
<P>Lists the element reservations in the current CMS library in the CMS list buffer.</P>

<P>If passed a prefix argument, cms-show-reservations pops a Show Reservations form onto the screen. The fields in the form are:</P>

<P>&middot; Elements</P>

<P>&middot; Generation</P>

<P>&middot; User name.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-fetch)</B></P>

<BLOCKQUOTE>
<P>Prompts for an element name and fetches the specified element, reading it into a new buffer and making that buffer current.</P>

<P>If passed a prefix argument, cms-fetch pops up a Fetch form. The fields in the form are:</P>

<P>&middot; Element</P>

<P>&middot; Generation (defaults to highest generation)</P>

<P>&middot; No history flag (default is 1)</P>

<P>&middot; No notes flag (default is 1).</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-reserve)</B></P>

<BLOCKQUOTE>
<P>Prompts for an element name and a remark in the Mini-buffer and reserves the specified element, reading it into a new buffer and making that buffer the current buffer.</P>

<P>If passed a prefix argument, cms-reserve pops a Reserve form onto the screen. The fields in the form are:</P>

<P>&middot; Element</P>

<P>&middot; Remark</P>

<P>&middot; Generation</P>

<P>&middot; No history flag (default is 1)</P>

<P>&middot; No notes flag (default is 1).</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-unreserve)</B></P>

<BLOCKQUOTE>
<P>Prompts for the name of an element and a remark in the Mini-buffer and unreserves the specified element.</P>

<P>If passed a prefix argument, cms-unreserve does not prompt for a remark.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-replace)</B></P>

<BLOCKQUOTE>
<P>Prompts for the name of an element and replaces the specified element into the CMS library.</P>

<P>If passed a prefix argument, cms-replace pops up a Replace form onto the screen. The fields in the form are:</P>

<P>&middot; Element</P>

<P>&middot; Remark</P>

<P>&middot; Variant</P>

<P>&middot; Reservation flag</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-create-element)</B></P>

<BLOCKQUOTE>
<P>Prompts for the name of an element and creates the named element.</P>

<P>If passed a prefix argument, cms-create-element pops up a Create Element form. The fields in the form are:</P>

<P>&middot; Element</P>

<P>&middot; Remark</P>

<P>&middot; History</P>

<P>&middot; Keep flag</P>

<P>&middot; Reservation flag</P>

<P>&middot; Concurrency flag (default is 1)</P>

<P>&middot; Reference flag (default is 0).</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-copy-element)</B></P>

<BLOCKQUOTE>
<P>Prompts for the name of an existing element and a new element name, then copies the existing element to the new element.</P>

<P>If passed a prefix argument, cms-copy-element pops up a Copy Element form. The fields in the form are:</P>

<P>&middot; Element</P>

<P>&middot; New element</P>

<P>&middot; Remark.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-insert-element)</B></P>

<BLOCKQUOTE>
<P>Prompts for the name of an existing element and a group name, then inserts the specified element into the named group.</P>

<P>If passed a prefix argument, cms-insert-element pops up an Insert Element form. The fields in the form are:</P>

<P>&middot; Element</P>

<P>&middot; Group</P>

<P>&middot; Remark.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-insert-group)</B></P>

<BLOCKQUOTE>
<P>Prompts for the name of a subgroup and the group into which the subgroup should be inserted, then performs the insertion.</P>

<P>If passed a prefix argument, cms-insert-group pops up an Insert Group form. The fields in the form are:</P>

<P>&middot; Subgroup</P>

<P>&middot; Group</P>

<P>&middot; Remark.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-insert-generation)</B></P>

<BLOCKQUOTE>
<P>Prompts for an element name and a class name, then inserts the latest generation of the specified element into the named class.</P>

<P>If passed a prefix argument, cms-insert-generation pops up an Insert Generation form. The fields in the form are:</P>

<P>&middot; Element</P>

<P>&middot; Class</P>

<P>&middot; Generation (default is highest generation)</P>

<P>&middot; Remark.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-modify-class)</B></P>

<BLOCKQUOTE>
<P>Pops up a Modify Class form which allows you to modify class attributes. The fields in the form are:</P>

<P>&middot; Class</P>

<P>&middot; Remark</P>

<P>&middot; New class</P>

<P>&middot; New class remark</P>

<P>&middot; Read-only flag.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-modify-group)</B></P>

<BLOCKQUOTE>
<P>Pops up a Modify Group form which allows you to modify group attributes. The fields in the form are:</P>

<P>&middot; Group</P>

<P>&middot; Remark</P>

<P>&middot; New group</P>

<P>&middot; New group remark</P>

<P>&middot; Read-only flag.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-modify-element)</B></P>

<BLOCKQUOTE>
<P>Pops up a Modify Element form which allows you to modify element attributes. The fields in the form are:</P>

<P>&middot; Element</P>

<P>&middot; Remark</P>

<P>&middot; New element</P>

<P>&middot; New element remark</P>

<P>&middot; History</P>

<P>&middot; Concurrency flag (default is 1)</P>

<P>&middot; Reference flag (default is 1).</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-remove-element)</B></P>

<BLOCKQUOTE>
<P>Prompts for the name of an element and a group name and removes the element from the specified group.</P>

<P>If passed a prefix argument, cms-remove-element pops up a Remove Element form. The form contains the following fields:</P>

<P>&middot; Element</P>

<P>&middot; Group</P>

<P>&middot; Remark.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-remove-generation)</B></P>

<BLOCKQUOTE>
<P>Prompts for an element name and a class name and removes the specified generation of the element from the class.</P>

<P>If passed a prefix argument, cms-remove-generation pops up a Remove Generation form containing the following fields:</P>

<P>&middot; Element</P>

<P>&middot; Class</P>

<P>&middot; Remark.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-remove-group)</B></P>

<BLOCKQUOTE>
<P>Prompts for a subgroup name and a group name, then removes the subgroup from the specified group.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-delete-class)</B></P>

<BLOCKQUOTE>
<P>Prompts for a class name and deletes the specified class.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-delete-element)</B></P>

<BLOCKQUOTE>
<P>Prompts for an element name and a remark deletes the specified element. If a prefix argument is provided, the remark is not required.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-delete-group)</B></P>

<BLOCKQUOTE>
<P>Prompts for a group name and a remark, then deletes the specified group. If a prefix argument is provided, the remark is not required.</P>
</BLOCKQUOTE>

<HR>
<P><B>(cms-remark)</B></P>

<BLOCKQUOTE>
<P>Prompts for a remark and enters this into the CMS library's remark history.</P>

<HR>
<H2><A name="messages"></A>MESSAGES, Displaying Broadcast Messages</H2>

<!--<P><I><B>MESSAGES, Displaying Broadcast Messages </B></I> MESSAGES Broadcast message trapping Trapping broadcast messages</P>-->
<P>The MESSAGES library defines functions which trap OpenVMS broadcast messages and display their text in a small window at the bottom of the screen.</P>

<P>To start the trapping of broadcast messages, load the MESSAGES package with <KBD>ESC-x execute-mlisp-file</KBD>.</P>

<P>The variable broadcast-feeps can be used to customise the behaviour of MESSAGES library; it contains the number of bell characters that are sent to the terminal when a new message is received. The default value of broadcast-feeps is 1.</P>

<HR>
<H2><A name="spell"></A>SPELL, Spelling Error Detection And Correction</H2>

<!--<P><I><B>SPELL, Spelling Error Detection And Correction </B></I> SPELL Spelling correction DECspell interface</P>-->
<P>The SPELL defines functions which provide a user interface to Emacs' interface to the DECspell layered product.</P>

<P>The following functions are provided:</P>
</BLOCKQUOTE>

<HR>
<P><B>(spell-line)</B></P>

<BLOCKQUOTE>
<P>This function spell-checks each word on the line in which dot is located. For each spelling error reported by DECspell, a list of possible spelling corrections is displayed and you are asked to input the correct spelling. Full word expansion is available during this operation. If you type just a Return, the word will not be changed.</P>
</BLOCKQUOTE>

<HR>
<P><B>(spell-word-in-buffer)</B></P>

<BLOCKQUOTE>
<P>This function checks the spelling of the word in which dot is located. If the spelling is incorrect, a list of possible corrections are displayed and you are asked you to type one. Full word expansion is enabled.</P>
</BLOCKQUOTE>

<HR>
<P><B>(spell-newline)</B></P>

<BLOCKQUOTE>
<P>This function is used to replace the binding for the Return key in buffers that require automatic spell checking. It causes the current line to be checked before the newline function is executed.</P>
</BLOCKQUOTE>

<HR>
<P><B>(spell-newline-and-indent)</B></P>

<BLOCKQUOTE>
<P>This function is used to replace the binding of the Linefeedkey in buffers that require automatic spell checking. It causes the current line to be checked before the newline-and-indentfunction is executed.</P>
</BLOCKQUOTE>

<HR>
<P><B>(make-text-mode-spell)</B></P>

<BLOCKQUOTE>
<P>This function is used to make Text Mode perform automatic spelling detection and correction as text is typed in. If you require this feature, you should include the following lines in your EMACSINIT.ML:</P>

<P>(execute-mlisp-file "spell")</P>

<P>(make-text-mode-spell)</P>
</BLOCKQUOTE>

<HR>
<H2><A name="thesaurus"></A>THESAURUS, An Interface to the DECspell Thesaurus</H2>

<!--<P><I><B>THESAURUS, An Interface to the DECspell Thesaurus </B></I> THESAURUS DECspell thesaurus interface</P>-->
<BLOCKQUOTE>
<P>The THESAURUS library defines two functions that provide an interface to the DECspell Thesaurus from within Emacs:</P>
</BLOCKQUOTE>

<HR>
<P><B>(et-word)</B></P>

<BLOCKQUOTE>
<P>Prompts for a word in the Mini-buffer and checks this against the DECspell thesaurus. If the word is found in the thesaurus, Emacs pops up a buffer called Electronic Thesaurus and displays in the buffer alternatives for the specified word. If the specified word is not found in the thesaurus, an error message is displayed.</P>
</BLOCKQUOTE>

<HR>
<P><B>(et-word-in-buffer)</B></P>

<BLOCKQUOTE>
<P>Checks the word that dot is in against the thesaurus. If the word is found in the thesaurus, a list of possible alternatives is displayed in the Electronic Thesaurus buffer. If the word is not found, an error message is displayed. THESAURUS.KEY</P>

<P>There are no default key bindings for these functions, but you can define your own bindings by creating a file called THESAURUS.KEY in your EMACS$PATH. The file should contain appropriate MLisp commands to bind the thesaurus functions to the desired key bindings. The THESAURUS library will attempt to load this file automatically when you load the THESAURUS library.</P>
</BLOCKQUOTE>

<HR>
</BODY>
</HTML>

