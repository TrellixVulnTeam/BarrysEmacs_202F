<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<TITLE>Functions F*</TITLE>

<LINK REL="STYLESHEET" HREF="styles.css">
</HEAD>
<BODY>
<HR>
<P><A name="fetch-array">(<B>fetch-array</B> <CODE>array indices...</CODE>)</A></P>

<BLOCKQUOTE>
<P>Retrieves a value from an array. The arguments to this function are the array and the indices of the array. <CODE>fetch-array</CODE> checks that there are exactly the right number of indices and range-checks them.</P>



<P><B>Example:</B> Retrieve element 3,5 from array 2d-array.</P>

<PRE>
(setq value (fetch-array 2d-array 3 5))
</PRE>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_t.htm#type-of-expression">type-of-expression</A></LI>
<LI><A HREF="fn_b.htm#bounds-of-array">bounds-of-array</A></LI>
<LI><A HREF="fn_s.htm#setq-array">setq-array</A></LI>
<LI><A HREF="fn_a.htm#array">array</A></LI>
</UL>


</BLOCKQUOTE>

<HR>
<P><A name="fetch-database-entry"></A>(<B>fetch-database-entry</B> <CODE>dbname</CODE> <CODE>key</CODE>)</P>

<BLOCKQUOTE>
<P>Reads the entry in the database corresponding to the given key and inserts it into the current buffer.</P>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_e.htm#extend-database-search-list">extend-database-search-list</A></LI>
<LI><A HREF="#fetch-help-database-entry">fetch-help-database-entry</A></LI>
<LI><A HREF="fn_l.htm#list-databases">list-databases</A></LI>
<LI><A HREF="fn_p.htm#put-database-entry">put-database-entry</A></LI>
</UL>

</BLOCKQUOTE>

<HR>
<P><A name="fetch-help-database-entry"></A>(<B>fetch-help-database-entry</B> <CODE>dbname</CODE> <CODE>keys-string</CODE>)</P>

<BLOCKQUOTE>
<P><B>VMS only</B></P>

<P>Takes the entry in the help database corresponding to the given key string and inserts it into the current buffer.

<P>The key string is a sequence of up to 9 keys separated by whitespace. For example, to insert the help for the entry:

<PRE>
copy /log
</PRE>

<P>the string would be:</P>

<PRE>
"copy /log"
</PRE>

<P>The variable <CODE>fetch-help-database-flags</CODE> is used to control the information retrieved from the help database file.</P>


<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_e.htm#extend-database-search-list">extend-database-search-list</A></LI>
<LI><A HREF="#fetch-database-entry">fetch-database-entry</A></LI>
<LI><A HREF="fn_l.htm#list-databases">list-databases</A></LI>
<LI><A HREF="fn_p.htm#put-database-entry">put-database-entry</A></LI>
<LI><A HREF="var_f.htm#fetch-help-database-flags">fetch-help-database-flags</A> (Variable)</LI>
</UL>

</BLOCKQUOTE>

<HR>
<P><A name="file-exists"></A>(<B>file-exists</B> <CODE>file-name</CODE>)</P>

<BLOCKQUOTE>
<P>Returns 1 if the specified file exists and is writeable, -1 if the file exists but is only readable, and 0 otherwise.</P>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_e.htm#expand-file-name">expand-file-name</A></LI>
<LI><A HREF="#file-is-a-directory">file-is-a-directory</A></LI>
</UL>

</BLOCKQUOTE>

<HR>
<P><A name="file-format-string"></A>(<B>file-format-string</B> <CODE>format</CODE> <CODE>file-name</CODE>)</P>

<BLOCKQUOTE>
<P><CODE>file-format-string</CODE> is used to create formatted string based on parts of filenames.</P>

<P>The <CODE>format</CODE> string is made of format specifications and literal characters. literal characters are copied to the output as is. Format specifications are replaced with appropriate text.</P>

<P>The format specification syntax is:</P>

<PRE>
% <EM>arg</EM> <EM>fmt-type</EM>
</PRE>

<P>The optional <EM>arg</EM> is a positive or negative decimal number.</P>

<P>The possible values for <EM>fmt-type</EM> are shown in the following table.
The examples in the table are based on a file specification of:</P>

<PRE>
c:\users\barry\bemacs\emacsinit.ml
</PRE>


<TABLE BORDER="1" CELLPADDING="2">
<TR>
<TH ALIGN="LEFT" VALIGN="TOP">Type</TH>
<TH ALIGN="LEFT" VALIGN="TOP">Description</TH>
<TH ALIGN="LEFT" VALIGN="TOP">Example
</TH><TH ALIGN="LEFT" VALIGN="TOP">Output
</TH>

</TR><TR>
<TD VALIGN="TOP" ALIGN="LEFT">%</TD>
<TD VALIGN="TOP" ALIGN="LEFT">literal % character</TD>
<TD VALIGN="TOP" ALIGN="LEFT">%%</TD>
<TD VALIGN="TOP" ALIGN="LEFT">%</TD>
</TR>

<TR>
<TD VALIGN="TOP" ALIGN="LEFT">fn</TD>
<TD VALIGN="TOP" ALIGN="LEFT">filename</TD>
<TD VALIGN="TOP" ALIGN="LEFT">%fn</TD>
<TD VALIGN="TOP" ALIGN="LEFT">emacsinit</TD>
</TR>

<TR>
<TD VALIGN="TOP" ALIGN="LEFT">ft</TD>
<TD VALIGN="TOP" ALIGN="LEFT">filetype</TD>
<TD VALIGN="TOP" ALIGN="LEFT">%ft</TD>
<TD VALIGN="TOP" ALIGN="LEFT">.ml</TD>
</TR>

<TR>
<TD VALIGN="TOP" ALIGN="LEFT">fa</TD>
<TD VALIGN="TOP" ALIGN="LEFT">filename and filetype</TD>
<TD VALIGN="TOP" ALIGN="LEFT">%fa</TD>
<TD VALIGN="TOP" ALIGN="LEFT">emacsinit.ml</TD>
</TR>

<TR>
<TD VALIGN="TOP" ALIGN="LEFT">pc</TD>
<TD VALIGN="TOP" ALIGN="LEFT">path character</TD>
<TD VALIGN="TOP" ALIGN="LEFT">%pc</TD>
<TD VALIGN="TOP" ALIGN="LEFT">\</TD>
</TR>

<TR>
<TD VALIGN="TOP" ALIGN="LEFT">pa</TD>
<TD VALIGN="TOP" ALIGN="LEFT">disk and directory</TD>
<TD VALIGN="TOP" ALIGN="LEFT">%pa</TD>
<TD VALIGN="TOP" ALIGN="LEFT">c:\users\barry\bemacs\</TD>
</TR>

<TR>
<TD VALIGN="TOP" ALIGN="LEFT">ps</TD>
<TD VALIGN="TOP" ALIGN="LEFT">set path split point</TD>
<TD VALIGN="TOP" ALIGN="LEFT">%4ps%ph</TD>
<TD VALIGN="TOP" ALIGN="LEFT">c:\users\barry\bemacs\</TD>
</TR>

<TR>
<TD VALIGN="TOP" ALIGN="LEFT">ph

</TD>
<TD VALIGN="TOP" ALIGN="LEFT">path head</TD>
<TD VALIGN="TOP" ALIGN="LEFT">%3ps%ph<BR>%2ps%ph
<BR>%1ps%ph
<BR>%0ps%ph
<BR>%-1ps%ph
<BR>%-2ps%ph
<BR></TD>
<TD VALIGN="TOP" ALIGN="LEFT">c:\users\barry\bemacs\

<BR>c:\users\barry\
<BR>c:\users\<BR>
c:\users\barry\bemacs\<BR>
c:\users\barry\<BR>
c:\users\<BR>

</TD>
</TR>

<TR>
<TD VALIGN="TOP" ALIGN="LEFT">pt</TD>
<TD VALIGN="TOP" ALIGN="LEFT">path tail</TD>
<TD VALIGN="TOP" ALIGN="LEFT">%-2ps%pt<BR>%3ps%pt
<BR>%2ps%pt
<BR>%1ps%pt
<BR>%0ps%pt
<BR>%-1ps%pt

<BR>%-2ps%pt</TD>
<TD VALIGN="TOP" ALIGN="LEFT">barry\bemacs\<BR>&nbsp;<BR>bemacs\<BR>barry\bemacs\<BR>&nbsp;<BR>bemacs\<BR>barry\bemacs\</TD>
</TR>

<TR>
<TD VALIGN="TOP" ALIGN="LEFT">pv</TD>
<TD VALIGN="TOP" ALIGN="LEFT">disk</TD>
<TD VALIGN="TOP" ALIGN="LEFT">%pv</TD>
<TD VALIGN="TOP" ALIGN="LEFT">c:</TD>
</TR>

<TR>
<TD VALIGN="TOP" ALIGN="LEFT">pd</TD>
<TD VALIGN="TOP" ALIGN="LEFT">directory</TD>
<TD VALIGN="TOP" ALIGN="LEFT">%pd</TD>
<TD VALIGN="TOP" ALIGN="LEFT">\users\barry\bemacs\</TD>
</TR>
</TABLE>


</BLOCKQUOTE>

<HR>
<P><A name="file-is-a-directory"></A>(<B>file-is-a-directory</B> <CODE>file-name</CODE>)</P>

<BLOCKQUOTE>
<P>Returns 1 if the specified <CODE>file-name</CODE> is a directory and 0 otherwise.</P>

<P><B>Examples:</B></P>

<PRE>
(file-is-a-directory "/tmp")

(file-is-a-directory "c:\\temp")
</PRE>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_e.htm#expand-file-name">expand-file-name</A></LI>
<LI><A HREF="#file-exists">file-exists</A></LI>
</UL>

</BLOCKQUOTE>

<HR>
<P><A name="file-name-expand-and-default"></A>(<B>file-name-expand-and-default</B> <CODE>file-name</CODE> <CODE>default-file-name</CODE>)</P>

<BLOCKQUOTE>
<P>Returns a string containing a file name. The file name returned is the <CODE>file-name</CODE> will any missing part of the file name defaulted from the <CODE>default-file-name</CODE> parameter and the current working directory.</P>
</BLOCKQUOTE>

<HR>
<P><A name="filter-region"></A>(<B>filter-region</B> <CODE>command</CODE>)</P>

<BLOCKQUOTE>
<P>Takes the region and passes it as input to the given operating system command. The output from the command replaces the region. The contets of the region are saved in <CODE>Kill buffer</CODE>.</P>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_e.htm#execute-monitor-command">execute-monitor-command</A></LI>
</UL>


</BLOCKQUOTE>

<HR>
<P><A name="following-char"></A>(<B>following-char</B>)</P>

<BLOCKQUOTE>
<P>Returns the character immediately following dot as an integer. The null character (0) is returned if dot is at the end of the buffer.</P>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_p.htm#preceding-char">preceding-char</A></LI>
</UL>



</BLOCKQUOTE>

<HR>
<P><A name="force-exit-process"></A>(<B>force-exit-process</B> <CODE>process-name exit-code</CODE>)</P>

<BLOCKQUOTE>
<P>Forces the image running is the specified subprocess to exit with the specified code. This can be used to stop an image that has run amok. All exit handlers for the image will be run.</P>

<P>If no image is running in the process, the exit request will be queued up and executed next time the target process executes in user mode (the next time an image is run).</P>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_c.htm#current-process-name">current-process-name</A></LI>
<LI><A HREF="fn_k.htm#kill-process">kill-process</A></LI>
<LI><A HREF="fn_l.htm#list-processes">list-processes</A></LI>
<LI><A HREF="fn_p.htm#pause-process">pause-process</A></LI>
<LI><A HREF="fn_r.htm#resume-process">resume-process</A></LI>
<LI><A HREF="fn_s.htm#set-current-process">set-current-process</A></LI>
<LI><A HREF="fn_s.htm#set-process-name">set-process-name</A></LI>
<LI><A HREF="fn_s.htm#start-DCL-process">start-DCL-process</A></LI>
<LI><A HREF="fn_w.htm#wait-for-process-input-request">wait-for-process-input-request</A></LI>
</UL>

</BLOCKQUOTE>

<HR>
<P><A name="forward-balanced-paren-line"></A>(<B>forward-balanced-paren-line</B> <CODE>expression-1</CODE>)</P>

<BLOCKQUOTE>
<P>Moves dot forward until either the end of the buffer is reached, or an unmatched closing parenthesis is encountered, or the beginning of a line is encountered at parenthesis level zero, that is, without an unmatched parenthesis existing between the line and the starting position of dot.</P>

<P>The parameter is the number of parentheses to ignore before applying the match.</P>

<P>The definition of parenthesis is derived from the syntax table for the current buffer.</P>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_b.htm#backward-balanced-paren-line">backward-balanced-paren-line</A></LI>
<LI><A HREF="fn_b.htm#backward-paren">backward-paren</A></LI>
<LI><A HREF="fn_f.htm#forward-paren">forward-paren</A></LI>
</UL>

</BLOCKQUOTE>

<HR>
<P><A name="forward-character"></A>(<B>forward-character</B> <CODE>repeat-count</CODE>) ^F or right-arrow</P>

<BLOCKQUOTE>
<P>Moves dot forward prefix-argument times <CODE>repeat-count</CODE> characters. If <CODE>repeat-count</CODE> is omitted, 1 is assumed. End-of-lines and tabs each count as one character. You cannot move past the end of the buffer.</P>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_b.htm#backward-character">backward-character</A></LI>
</UL>

</BLOCKQUOTE>

<HR>
<P><A name="forward-paragraph"></A>(<B>forward-paragraph</B>) ESC-)</P>

<BLOCKQUOTE>
<P>Moves dot to the end of the current or following paragraph. Blank lines that separate paragraphs and are not considered parts of paragraphs.</P>

<P>Paragraphs are defined by the variable paragraph-delimiters.</P>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_b.htm#backward-paragraph">backward-paragraph</A></LI>
</UL>

</BLOCKQUOTE>

<HR>
<P><A name="forward-paren"></A>(<B>forward-paren</B>)</P>

<BLOCKQUOTE>
<P>Moves dot forward until an unmatched closing parenthesis, or the end of the buffer is found. This can be used to aid in skipping over Lisp S-expressions.</P>

<P>The argument is the number of parentheses to ignore before applying the match.</P>


<P>The definition of parenthesis is derived from the syntax table for the current buffer.</P>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_b.htm#backward-paren">backward-paren</A></LI>
</UL>



</BLOCKQUOTE>

<HR>
<P><A name="forward-sentence"></A>(<B>forward-sentence</B>) ESC-e</P>

<BLOCKQUOTE>
<P>Moves dot forward to the end of a sentence. A sentence is bounded by the string variable <CODE>sentence-delimiters</CODE>.</P>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_b.htm#backward-sentence">backward-sentence</A></LI>
</UL>

</BLOCKQUOTE>

<HR>
<P><A name="forward-word"></A>(<B>forward-word</B> <CODE>repeat-count</CODE>) ESC-f</P>

<BLOCKQUOTE>
<P>Moves dot forward to the end of the prefix-argument times <CODE>repeat-count</CODE> word. If <CODE>repeat-count</CODE> is omitted, 1 is assumed. If dot is not currently in the middle of a word, the command skips all intervening punctuation. It then skips over the words, leaving dot positioned after the last character of the word.</P>

<P>A word is defined by the current syntax table.</P>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_b.htm#backward-word">backward-word</A></LI>
<LI><A HREF="fn_m.htm#modify-syntax-table">modify-syntax-table</A></LI>
<LI><A HREF="fn_d.htm#dump-syntax-table">dump-syntax-table</A></LI>
</UL>

</BLOCKQUOTE>

<HR>
<P><A name="fundamental-mode"></A>(<B>fundamental-mode</B>)</P>

<BLOCKQUOTE>
<P>Turns on a major mode similar to Normal Mode. It provides a natural environment for processing ordinary text, or program sources for which there is no specialised language mode. The main advantage of Fundamental Mode over Normal mode is that it displays parenthesis balancing.</P>
</BLOCKQUOTE>

<P><B>See also:</B></P>

<UL>
<LI><A HREF="fn_n.htm#normal-mode">normal-mode</A></LI>
<LI><A HREF="fn_t.htm#text-mode">text-mode</A></LI>
<LI><A HREF="fn_c.htm#c-mode">c-mode</A></LI>
<LI><A HREF="fn_l.htm#lisp-mode">lisp-mode</A></LI>
</UL>



<HR>
</BODY>
</HTML>

