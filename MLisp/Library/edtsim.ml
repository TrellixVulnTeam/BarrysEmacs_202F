(progn
    (declare-global ~EDT-direction ~EDT-sect-length ~EDT-page-marker
                    ~EDT-search-marker ~EDT-set-mark ~EDT-help)
    (setq ~EDT-direction 1)
    (setq ~EDT-sect-length 16)
    (setq ~EDT-page-marker "\^k\\|\^l")
    (setq ~EDT-search-marker 0)
    (setq ~EDT-set-mark 0)
    (error-occurred (setq global-mode-string "EDT"))
    (setq return-to-emacs-hook
        (setq enter-emacs-hook "EDT-keypad"))
    (setq exit-emacs-hook
        (setq leave-emacs-hook "EDT-no-keypad"))
    (autoload "~TM-justify-region" "textmode")
    (defun
        (~EDT-check-mark x y
            (setq x (arg 1))
            (setq y (arg 2))
            (if (> x y)
                (progn (setq x (arg 2)) (setq y (arg 1)))
            )
            (if (& (>= ~EDT-set-mark x) (<= ~EDT-set-mark y))
                (setq ~EDT-set-mark 0)
            )
        )
        (EDT-keypad
            (send-string-to-terminal "\e=")
        )
        (EDT-no-keypad
            (if (& terminal-is-terminal (! terminal-application-keypad))
                (send-string-to-terminal "\e>")
            )
        )
        (EDT-find x y
            (setq y prefix-argument)
            (setq x (arg 1 "Search for: "))
            (if ~EDT-direction
                (provide-prefix-argument y (search-forward x))
                (provide-prefix-argument y (search-reverse x))
            )
            (setq y (+ (dot) 0))
            (save-excursion
                (region-around-match 0)
                (setq ~EDT-search-marker
                    (if (> (+ (mark) 0) y) (dot) (mark))
                )
            )
        )
        (EDT-fndnxt y
            (setq y prefix-argument)
            (if ~EDT-direction
                (provide-prefix-argument y (search-forward ""))
                (provide-prefix-argument y (search-reverse ""))
            )
            (setq y (+ (dot) 0))
            (save-excursion
                (region-around-match 0)
                (setq ~EDT-search-marker
                    (if (> (+ (mark) 0) y) (dot) (mark))
                )
            )
        )
        (EDT-replace
            (if (| ~EDT-set-mark ~EDT-search-marker)
                (save-excursion
                    (set-mark)
                    (goto-character
                        (if ~EDT-set-mark ~EDT-set-mark ~EDT-search-marker)
                    )
                    (erase-region)
                    (error-occurred (yank-buffer "Paste-0"))
                    (if ~EDT-set-mark (setq ~EDT-set-mark 0))
                )
                (error-message "No select range active")
            )
        )
        (EDT-subs y
            (setq y prefix-argument)
            (while (>= y 1)
                (EDT-replace)
                (EDT-fndnxt)
                (setq y (- y 1))
            )
        )
        (EDT-del-l y
            (setq y prefix-argument)
            (setq ~EDT-search-marker 0)
            (while (>= y 1)
                (save-excursion
                    (set-mark)
                    (end-of-line)
                    (error-occurred (forward-character))
                    (~EDT-check-mark (mark) (dot))
                    (delete-region-to-buffer "del-l")
                )
                (setq y (- y 1))
            )
        )
        (EDT-und-l y
            (setq y prefix-argument)
            (setq ~EDT-search-marker 0)
            (while (>= y 1)
                (error-occurred (yank-buffer "del-l"))
                (setq y (- y 1))
            )
        )
        (EDT-advance (setq ~EDT-direction 1))
        (EDT-backup (setq ~EDT-direction 0))
        (~EDT-advance-mini
            (setq ~EDT-direction 1)
            (insert-character "\n")
            (exit-emacs)
        )
        (~EDT-backup-mini
            (setq ~EDT-direction 0)
            (insert-character "\n")
            (exit-emacs)
        )
        (~EDT-enter
            (insert-character "\n")
            (exit-emacs)
        )
        (EDT-not-implemented
            (setq ~EDT-search-marker 0)
            (error-message "This key sequence is not implemented")
        )
        (EDT-repeat y x
            (setq y 0)
            (setq x (last-key-struck))
            (while (& (>= x '0') (<= x '9'))
                (setq y (+ (* y 10) (- x '0')))
                (message y)
                (setq x (get-tty-character))
            )
            (push-back-character x)
            (return-prefix-argument y)
        )
        (EDT-cut x y
            (setq ~EDT-search-marker 0)
            (~EDT-check-mark (mark) (dot))
            (delete-region-to-buffer "Paste-0")
            (unset-mark)
        )
        (EDT-paste x
            (setq ~EDT-search-marker 0)
            (setq x prefix-argument)
            (while (>= x 1)
                (yank-buffer "Paste-0")
                (setq x (- x 1))
            )
        )
        (EDT-word y
            (setq ~EDT-search-marker 0)
            (setq y prefix-argument)
            (if ~EDT-direction
                (provide-prefix-argument y (forward-word))
                (provide-prefix-argument y (backward-word))
            )
        )
        (EDT-bol y
            (setq ~EDT-search-marker 0)
            (setq y prefix-argument)
            (while (>= y 1)
                (if ~EDT-direction
                    (progn
                        (if (bolp)
                            (previous-line)
                        )
                        (beginning-of-line)
                    )
                    (progn
                        (next-line)
                        (beginning-of-line)
                    )
                )
                (setq y (- y 1))
            )
        )
        (EDT-fill ~old-right-margin
            (setq ~EDT-search-marker 0)
            (~EDT-check-mark (mark) (dot))
            (if (= (setq ~old-right-margin right-margin) 10000)
                (setq right-margin (- terminal-width 2))
            )
            (save-excursion
                (if (< (+ (dot)) (+ (mark)))
                    (exchange-dot-and-mark))
                (insert-character '\n')
                (~TM-justify-region)
            )
            (setq right-margin ~old-right-margin)
            (unset-mark)
        )
        (EDT-eol y
            (setq ~EDT-search-marker 0)
            (setq y prefix-argument)
            (while (>= y 1)
                (if ~EDT-direction
                    (progn
                        (if (eolp)
                            (next-line)
                        )
                        (end-of-line)
                    )
                    (progn
                        (previous-line)
                        (end-of-line)
                    )
                )
                (setq y (- y 1))
            )
        )
        (EDT-char y
            (setq y prefix-argument)
            (setq ~EDT-search-marker 0)
            (if ~EDT-direction
                (provide-prefix-argument y (forward-character))
                (provide-prefix-argument y (backward-character))
            )
        )
        (EDT-del-eol y
            (setq ~EDT-search-marker 0)
            (setq y prefix-argument)
            (while (>= y 1)
                (save-excursion
                    (set-mark)
                    (EDT-eol)
                    (~EDT-check-mark (mark) (dot))
                    (delete-region-to-buffer "del-l")
                )
                (setq y (- y 1))
            )
        )
        (EDT-line y
            (setq ~EDT-search-marker 0)
            (setq y prefix-argument)
            (while (>= y 1)
                (if ~EDT-direction
                    (next-line)
                    (if (bolp) (previous-line))
                )
                (beginning-of-line)
                (setq y (- y 1))
            )
        )
        (EDT-noop (novalue))
        (EDT-del-c y
            (setq ~EDT-search-marker 0)
            (setq y prefix-argument)
            (while (>= y 1)
                (save-excursion
                    (set-mark)
                    (forward-character)
                    (delete-region-to-buffer "del-c")
                )
                (setq y (- y 1))
            )
        )
        (EDT-und-c  y
            (setq y prefix-argument)
            (setq ~EDT-search-marker 0)
            (provide-prefix-argument y (yank-buffer "del-c"))
        )
        (EDT-del-w y
            (setq y prefix-argument)
            (setq ~EDT-search-marker 0)
            (while (>= y 1)
                (save-excursion
                    (set-mark)
                    (forward-word)
                    (~EDT-check-mark (mark) (dot))
                    (delete-region-to-buffer "del-w")
                )
                (setq y (- y 1))
            )
        )
        (EDT-und-w y
            (setq ~EDT-search-marker 0)
            (setq y prefix-argument)
            (provide-prefix-argument y (yank-buffer "del-w"))
        )
        (EDT-specins
            (setq ~EDT-search-marker 0)
            (if prefix-argument-provided
                (if (> prefix-argument 255)
                    (error-message "Illegal character code")
                    (insert-character prefix-argument)
                )
                (insert-character 0)
            )
        )
        (EDT-page y
            (setq ~EDT-search-marker 0)
            (setq y prefix-argument)
            (if (error-occurred
                    (if ~EDT-direction
                        (provide-prefix-argument y (re-search-forward ~EDT-page-marker))
                        (provide-prefix-argument y (re-search-reverse ~EDT-page-marker))
                    )
                )
                (if ~EDT-direction (end-of-file) (beginning-of-file))
            )
        )
        (EDT-sect y
            (setq ~EDT-search-marker 0)
            (setq y prefix-argument)
            (while (>= y 1)
                (error-occurred
                    (provide-prefix-argument
                        (if (> window-size ~EDT-sect-length)
                            ~EDT-sect-length
                            (/ (* window-size 4) 5)
                        )
                        (EDT-line)
                    )
                )
                (setq y (- y 1))
            )
        )
        (EDT-sect-back y z
            (setq ~EDT-search-marker 0)
            (setq y prefix-argument)
            (setq z ~EDT-direction)
            (EDT-backup)
            (while (>= y 1)
                (error-occurred
                    (provide-prefix-argument
                        (if (> window-size ~EDT-sect-length)
                            ~EDT-sect-length
                            (/ (* window-size 4) 5)
                        )
                        (EDT-line)
                    )
                )
                (setq y (- y 1))
            )
            (setq ~EDT-direction z)
        )
        (EDT-bottom
            (setq ~EDT-search-marker 0)
            (end-of-file)
        )
        (EDT-top
            (setq ~EDT-search-marker 0)
            (beginning-of-file)
        )
        (EDT-open-line y
            (setq y prefix-argument)
            (setq ~EDT-search-marker 0)
            (provide-prefix-argument y (newline-and-backup))
        )
        (EDT-up y
            (setq y prefix-argument)
            (setq ~EDT-search-marker 0)
            (provide-prefix-argument y (previous-line))
        )
        (EDT-down y
            (setq y prefix-argument)
            (setq ~EDT-search-marker 0)
            (provide-prefix-argument y (next-line))
        )
        (EDT-left y
            (setq y prefix-argument)
            (setq ~EDT-search-marker 0)
            (provide-prefix-argument y (backward-character))
        )
        (EDT-right y
            (setq y prefix-argument)
            (setq ~EDT-search-marker 0)
            (provide-prefix-argument y (forward-character))
        )
        (EDT-chngcase y x
            (setq y prefix-argument)
            (if (| ~EDT-set-mark ~EDT-search-marker)
                (save-excursion
                    (set-mark)
                    (goto-character
                        (if ~EDT-set-mark ~EDT-set-mark ~EDT-search-marker)
                    )
                    (case-region-invert)
                    (if ~EDT-set-mark (setq ~EDT-set-mark 0))
                )
                (while (>= y 1)
                    (setq x (following-char))
                    (if (& (>= x 'A') (<= x 'Z'))
                        (progn
                            (delete-next-character)
                            (insert-character (+ (- x 'A') 'a'))
                            (backward-character)
                        )
                        (& (>= x 'a') (<= x 'z'))
                        (progn
                            (delete-next-character)
                            (insert-character (+ (- x 'a') 'A'))
                            (backward-character)
                        )
                    )
                    (EDT-char)
                    (setq y (- y 1))
                )
            )
        )
        (EDT-select
            (setq ~EDT-search-marker 0)
            (if ~EDT-set-mark
                (error-message "Select range already active")
            )
            (setq ~EDT-set-mark (+ (dot) 0))
            (set-mark)
        )
        (EDT-reset
            (setq ~EDT-search-marker 0)
            (setq ~EDT-set-mark 0)
            (unset-mark)
        )
        (EDT-help x i
            (if (! ~EDT-help)
                (save-window-excursion (error-occurred
                    (message "Formatting help. Please wait...") (sit-for 0)
                    (switch-to-buffer "EDT-help")
                    (erase-buffer)
                    (setq mode-line-format "")
                    (extend-database-search-list "EDT-help" "SYS$HELP:EDTHELP.HLB")
                    (setq x fetch-help-database-flags)
                    (setq fetch-help-database-flags 1)
                    (fetch-help-database-entry "EDT-help" "keypad vt100")
                    (setq fetch-help-database-flags x)
                    (beginning-of-file)
                    (set-mark)
                    (search-forward "l")
                    (erase-region)
                    (insert-character '+')
                    (replace-string "q" "-")
                    (replace-string "-w-" "-+-")
                    (re-replace-string "\\|\\|\e\\[[0-9]*m" "")
                    (re-replace-string "^x\\|x$" "|")
                    (re-replace-string "\\(\\W\\)x\\(\\W\\)" "\\1|\\2")
                    (replace-string "-k" "-+")
                    (replace-string "m-" "+-")
                    (replace-string "-v-" "-+-")
                    (replace-string "l-" "+-")
                    (replace-string "t-" "+-")
                    (replace-string "-n-" "-+-")
                    (replace-string "-j" "-+")
                    (replace-string "-u" "-+")
                    (replace-string " x" " |")
                    (replace-string "x " "| ")
                    (re-replace-string "^\\(.........................................\\) " "\\1")
                    (end-of-file)(set-mark)
                    (search-reverse "+")
                    (forward-character)
                    (exchange-dot-and-mark)
                    (erase-region)
                    (beginning-of-file)
                    (search-forward " +")
                    (backward-character)
                    (delete-previous-character)
                    (beginning-of-file)
                    (setq ~EDT-help 1)
                    (define-keymap "EDT-help-map")
                    (use-global-map "EDT-help-map")
                    (setq i 0)
                    (while (< i 256)
                        (bind-to-key "exit-emacs" (char-to-string i))
                        (setq i (+ i 1))
                    )
                )
            ))
            (save-window-excursion
                (use-old-buffer "EDT-help")
                (delete-other-windows)
                (use-global-map "EDT-help-map")
                (recursive-edit)
                (use-global-map "default-global-keymap")
            )
        )
    )
    (use-global-map "Minibuf-local-map")
    (bind-to-key "~EDT-advance-mini" "\(kp4)")
    (bind-to-key "~EDT-backup-mini" "\(kp5)")
    (bind-to-key "~EDT-enter" "\(enter)")
    (bind-to-key "~EDT-enter" "\(do)")
    (bind-to-key "expand-and-exit" "\(pf2)")
    (use-global-map "Minibuf-local-NS-map")
    (bind-to-key "~EDT-advance-mini" "\(kp4)")
    (bind-to-key "~EDT-backup-mini" "\(kp5)")
    (bind-to-key "~EDT-enter" "\(enter)")
    (bind-to-key "~EDT-enter" "\(do)")
    (bind-to-key "expand-and-exit" "\(pf2)")
    (use-global-map "default-global-keymap")
    (bind-to-key "EDT-not-implemented" "\(gold)-")
    (bind-to-key "EDT-repeat" "\(gold)0")
    (bind-to-key "EDT-repeat" "\(gold)1")
    (bind-to-key "EDT-repeat" "\(gold)2")
    (bind-to-key "EDT-repeat" "\(gold)3")
    (bind-to-key "EDT-repeat" "\(gold)4")
    (bind-to-key "EDT-repeat" "\(gold)5")
    (bind-to-key "EDT-repeat" "\(gold)6")
    (bind-to-key "EDT-repeat" "\(gold)7")
    (bind-to-key "EDT-repeat" "\(gold)8")
    (bind-to-key "EDT-repeat" "\(gold)9")
    (bind-to-key "EDT-sect" "\(kp8)")
    (bind-to-key "EDT-sect" "\(next screen)")
    (bind-to-key "EDT-sect-back" "\(prev screen)")
    (bind-to-key "EDT-cut" "\(kp6)")
    (bind-to-key "EDT-cut" "\(remove)")
    (bind-to-key "EDT-paste" "\(gold)\(kp6)")
    (bind-to-key "EDT-paste" "\(insert here)")
    (bind-to-key "EDT-advance" "\(kp4)")
    (bind-to-key "EDT-bottom" "\(gold)\(kp4)")
    (bind-to-key "EDT-backup" "\(kp5)")
    (bind-to-key "EDT-word" "\(kp1)")
    (bind-to-key "EDT-eol" "\(kp2)")
    (bind-to-key "EDT-bol" "\^h")
    (bind-to-key "execute-extended-command" "\(gold)\(kp7)")
    (bind-to-key "EDT-open-line" "\(gold)\(kp0)")
    (bind-to-key "EDT-line" "\(kp0)")
    (bind-to-key "EDT-select" "\(dot)")
    (bind-to-key "EDT-select" "\(select)")
    (bind-to-key "EDT-reset" "\(gold)\(dot)")
    (bind-to-key "EDT-help" "\(pf2)")
    (bind-to-key "help" "\(help)")
    (bind-to-key "EDT-del-eol" "\(gold)\(kp2)")
    (bind-to-key "EDT-char" "\(kp3)")
    (bind-to-key "EDT-top" "\(gold)\(kp5)")
    (bind-to-key "EDT-del-l" "\(pf4)")
    (bind-to-key "EDT-und-l" "\(gold)\(pf4)")
    (bind-to-key "EDT-find" "\(gold)\(pf3)")
    (bind-to-key "EDT-fndnxt" "\(pf3)")
    (bind-to-key "EDT-find" "\(find)")
    (bind-to-key "EDT-up" "\(up)")
    (bind-to-key "EDT-down" "\(down)")
    (bind-to-key "EDT-right" "\(right)")
    (bind-to-key "EDT-left" "\(left)")
    (bind-to-key "EDT-noop" "\(enter)")
    (bind-to-key "execute-extended-command" "\(do)")
    (bind-to-key "help" "\(help)")
    (bind-to-key "EDT-del-c" "\(comma)")
    (bind-to-key "EDT-und-c" "\(gold)\(comma)")
    (bind-to-key "EDT-del-w" "\(minus)")
    (bind-to-key "EDT-und-w" "\(gold)\(minus)")
    (bind-to-key "EDT-specins" "\(gold)\(kp3)")
    (bind-to-key "EDT-page" "\(kp7)")
    (bind-to-key "EDT-replace" "\(gold)\(kp9)")
    (bind-to-key "EDT-subs" "\(gold)\(enter)")
    (bind-to-key "EDT-chngcase" "\(gold)\(kp1)")
    (bind-to-key "EDT-not-implemented" "\(kp9)")
    (bind-to-key "EDT-fill" "\(gold)\(kp8)")
)
