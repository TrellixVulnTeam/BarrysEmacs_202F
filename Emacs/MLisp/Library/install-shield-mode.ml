; 
; install-shield-mode.ml
;
(save-excursion
    (temp-use-buffer "~hack")
    (use-syntax-table "Install-Shield")
    (modify-syntax-table "paren" "(" ")")
    (modify-syntax-table "paren" "{" "}")
    (modify-syntax-table "paren" "[" "]")
    (modify-syntax-table "comment" "/*" "*/")
    (modify-syntax-table "string" "\"")
    (modify-syntax-table "string" "'")
    (modify-syntax-table "prefix" "\\")
    (modify-syntax-table "word" "_$")
    (modify-syntax-table "comment" "//" "\n")
    (modify-syntax-table "keyword-1" "begin")
    (modify-syntax-table "keyword-1" "#if")
    (modify-syntax-table "keyword-1" "#ifdef")
    (modify-syntax-table "keyword-1" "#ifndef")
    (modify-syntax-table "keyword-1" "#elif")
    (modify-syntax-table "keyword-1" "#else")
    (modify-syntax-table "keyword-1" "#include")
    (modify-syntax-table "keyword-1" "begin")
    (modify-syntax-table "keyword-1" "bool")
    (modify-syntax-table "keyword-1" "byref")
    (modify-syntax-table "keyword-1" "call")
    (modify-syntax-table "keyword-1" "case")
    (modify-syntax-table "keyword-1" "char")
    (modify-syntax-table "keyword-1" "declare")
    (modify-syntax-table "keyword-1" "default")
    (modify-syntax-table "keyword-1" "downto")
    (modify-syntax-table "keyword-1" "else")
    (modify-syntax-table "keyword-1" "elseif")
    (modify-syntax-table "keyword-1" "end")
    (modify-syntax-table "keyword-1" "endfor")
    (modify-syntax-table "keyword-1" "endif")
    (modify-syntax-table "keyword-1" "endswitch")
    (modify-syntax-table "keyword-1" "endwhile")
    (modify-syntax-table "keyword-1" "exit")
    (modify-syntax-table "keyword-1" "for")
    (modify-syntax-table "keyword-1" "function")
    (modify-syntax-table "keyword-1" "goto")
    (modify-syntax-table "keyword-1" "hiword")
    (modify-syntax-table "keyword-1" "hwnd")
    (modify-syntax-table "keyword-1" "if")
    (modify-syntax-table "keyword-1" "int")
    (modify-syntax-table "keyword-1" "list")
    (modify-syntax-table "keyword-1" "long")
    (modify-syntax-table "keyword-1" "loword")
    (modify-syntax-table "keyword-1" "number")
    (modify-syntax-table "keyword-1" "pointer")
    (modify-syntax-table "keyword-1" "program")
    (modify-syntax-table "keyword-1" "prototype")
    (modify-syntax-table "keyword-1" "quad")
    (modify-syntax-table "keyword-1" "repeat")
    (modify-syntax-table "keyword-1" "return")
    (modify-syntax-table "keyword-1" "rgb")
    (modify-syntax-table "keyword-1" "short")
    (modify-syntax-table "keyword-1" "step")
    (modify-syntax-table "keyword-1" "string")
    (modify-syntax-table "keyword-1" "switch")
    (modify-syntax-table "keyword-1" "to")
    (modify-syntax-table "keyword-1" "then")
    (modify-syntax-table "keyword-1" "typedef")
    (modify-syntax-table "keyword-1" "until")
    (modify-syntax-table "keyword-1" "while")

    (modify-syntax-table "keyword-2" "CMDLINE")
    (modify-syntax-table "keyword-2" "ERRORFILENAME")
    (modify-syntax-table "keyword-2" "INFOFILENAME")
    (modify-syntax-table "keyword-2" "SRCDIR")
    (modify-syntax-table "keyword-2" "SRCDISK")
    (modify-syntax-table "keyword-2" "SUPPORTDIR")
    (modify-syntax-table "keyword-2" "TARGETDIR")
    (modify-syntax-table "keyword-2" "TARGETDISK")
    (modify-syntax-table "keyword-2" "WINDIR")
    (modify-syntax-table "keyword-2" "WINDISK")
    (modify-syntax-table "keyword-2" "WINSYSDIR")
    (modify-syntax-table "keyword-2" "WINSYSDISK")

    (modify-syntax-table "keyword-2" "AFTER")
    (modify-syntax-table "keyword-2" "APPEND")
    (modify-syntax-table "keyword-2" "BACK")
    (modify-syntax-table "keyword-2" "BACKBUTTON")
    (modify-syntax-table "keyword-2" "BEFORE")
    (modify-syntax-table "keyword-2" "CANCEL")
    (modify-syntax-table "keyword-2" "COMMAND")
    (modify-syntax-table "keyword-2" "COMMANDEX")
    (modify-syntax-table "keyword-2" "CONTINUE")
    (modify-syntax-table "keyword-2" "DISABLE")
    (modify-syntax-table "keyword-2" "DLG_ERR")
    (modify-syntax-table "keyword-2" "ENABLE")
    (modify-syntax-table "keyword-2" "ERROR")
    (modify-syntax-table "keyword-2" "EXCLUSIVE")
    (modify-syntax-table "keyword-2" "EXISTS")
    (modify-syntax-table "keyword-2" "FAILIFEXISTS")
    (modify-syntax-table "keyword-2" "FALSE")
    (modify-syntax-table "keyword-2" "FULL")
    (modify-syntax-table "keyword-2" "INFORMATION")
    (modify-syntax-table "keyword-2" "NEXT")
    (modify-syntax-table "keyword-2" "NEXTBUTTON")
    (modify-syntax-table "keyword-2" "NO")
    (modify-syntax-table "keyword-2" "NONEXCLUSIVE")
    (modify-syntax-table "keyword-2" "NOSET")
    (modify-syntax-table "keyword-2" "OFF")
    (modify-syntax-table "keyword-2" "ON")
    (modify-syntax-table "keyword-2" "PARTIAL")
    (modify-syntax-table "keyword-2" "REPLACE")
    (modify-syntax-table "keyword-2" "REPLACE_ITEM")
    (modify-syntax-table "keyword-2" "RESET")
    (modify-syntax-table "keyword-2" "RESTART")
    (modify-syntax-table "keyword-2" "SEVERE")
    (modify-syntax-table "keyword-2" "STATUS")
    (modify-syntax-table "keyword-2" "SET")
    (modify-syntax-table "keyword-2" "TRUE")
    (modify-syntax-table "keyword-2" "YES")


    (define-keymap "Install-Shield-map")
    (define-keymap "Install-Shield-ESC-map")
    (use-local-map "Install-Shield-map")
    (local-bind-to-key "Install-Shield-ESC-map" "\e")
    (execute-mlisp-file "install-shield-mode.key")
)
(delete-buffer "~hack")
(defun
    (install-shield-mode
	(setq mode-string "Install Shield")
	(use-syntax-table "Install-Shield")
	(use-local-map "Install-Shield-map")
	(novalue)
    )
)

(defun
    (back-paren			; Go to last open parenthesis at current level
	(backward-paren 0))
)
(defun
    (fore-paren			; Go to next close parenthesis at current level
	(forward-paren 0))
)
(defun
    (flash-back-paren 		; Flash the matching left parenthesis
	(save-excursion
	    (backward-paren 0)
	    (if (dot-is-visible)
		(sit-for 5)
		(progn
		    (beginning-of-line)
		    (set-mark)
		    (end-of-line)
		    (message (region-to-string)))
	    )
	)
    )
)
(defun
    (flash-fore-paren		; Flash the matching close parenthesis
	(save-excursion
	    (forward-paren 0)
	    (if (dot-is-visible)
		(sit-for 5)
		(progn
		    (beginning-of-line)
		    (set-mark)
		    (end-of-line)
		    (message (region-to-string)))
	    )
	)
    )
)
(defun
    (c-paren			; Flashes matching open parenthesis when ')' is typed.
	(insert-character (last-key-struck))
	(save-excursion
	    (backward-paren 0)
	    (if (dot-is-visible)
		(sit-for 5)
		(progn
		    (beginning-of-line)
		    (set-mark)
		    (end-of-line)
		    (message (region-to-string)))
	    )
	)
    )
)
(novalue)
)
