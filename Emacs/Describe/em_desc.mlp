(defun
    (em_desc-com
	(convert-em_desc_mll-to-help)
	(exit-emacs)
    )
)

(defun
    (time-cvt ~start ~end
	(setq ~start (current-time))
	(convert-em_desc_mll-to-help)
	(setq ~end (current-time))
	(get-tty-string (concat ~end " -:- " ~start))
    )
)
(defun
    (bpt
	(novalue)
    )
)
(defun
    (convert-em_desc_mll-to-help
	~name ~var ~in-para
	(~cvt-setup-buffer "cvt-to-hlp")
	(if 1
	    (insert-file "..\\describe\\em_desc.mll")
	    (insert-file "test.mll")
	)
	(setq current-buffer-allocation-size (* (buffer-size) 4))
	(lisp-mode)
	(~cvt-setup-buffer "cvt-cmd-ref")
	(~cvt-setup-buffer "cvt-var-ref")
	(~cvt-setup-buffer "cvt-tmp")
	(~cvt-setup-buffer "Kill buffer")
	(switch-to-buffer "cvt-to-hlp")
	(delete-other-windows)
	(split-current-window)
	(switch-to-buffer "cvt-cmd-ref")
	(split-current-window "cvt-var-ref")
	(pop-to-buffer "cvt-to-hlp")
	(setq window-size 2)
	(beginning-of-file) (error-occurred (replace-string "\\" "\\\\"))
	(beginning-of-file) (error-occurred (replace-string "{" "\\{"))
	(beginning-of-file) (error-occurred (replace-string "}" "\\}"))
	
	; 
	; RTF files do not treat a newline as whitespace
	; hence the need to add spaces to the end of lines.
	; Multiple spaces will distort justification of
	; text, so remove them
	; 

	; remove multiple spaces
;	(beginning-of-file)
;	(error-occurred (re-replace-string "   *" " "))
	; add a space at the end of lines that end in a word char
	(beginning-of-file)
	(error-occurred (re-replace-string "\\w$" "& "))
	; also add space at the end of lines that end in punctiation
	(beginning-of-file)
	(error-occurred (re-replace-string "[.;:]$" "& "))

	(setq ~in-para 0)
	(while (! (eobp))
	    (bpt)
	    (if
		(looking-at "\\[C\\(.*\\)]$")
		(progn
		    (region-around-match 1)
		    (sit-for 0)
		    (setq ~name (region-to-string))
		    (setq ~var (~cvt-name-to-var ~name))
		    (region-around-match 0) (erase-region)
		    (kill-to-end-of-line)
		    (~cvt-add-footnotes ~name ~var "cmd_" "Command")
		    (save-excursion
			(temp-use-buffer "cvt-cmd-ref")
			(insert-string "\\tab {\\uldb " ~name "}{\\v cmd_" ~var "} \\par\n")
		    )
		)
		(looking-at "\\[V\\(.*\\)]$")
		(progn
		    (region-around-match 1)
		    (sit-for 0)
		    (setq ~name (region-to-string))
		    (setq ~var (~cvt-name-to-var ~name))
		    (region-around-match 0) (erase-region)
		    (kill-to-end-of-line)
		    (~cvt-add-footnotes ~name ~var "var_" "Variable")
		    (save-excursion
			(temp-use-buffer "cvt-var-ref")
			(insert-string "{\\tab {\\uldb " ~name "}{\\v var_" ~var "}\n\\par}")
		    )
		)
		(|
		    (if (looking-at "DESCRIPTION") 1
			(looking-at "COMMAND NAME") 1
			(looking-at "DEFAULT BINDING") 1
			(looking-at "SYNOPSIS") 1
			(looking-at "SEE ALSO") 1
			(looking-at "EXAMPLE") 1
			(looking-at "VARIABLE NAME") 1
			(looking-at "DEFAULT VALUE") 1
			0
		    )
		)
		(progn
		    (insert-string "{\\li72 \\f4 \\fs20 \\b ")
		    (next-line) (beginning-of-line)
		    (insert-string " \\par\\pard} ")
		)
		(progn ~start-col ~
		    (if (! ~in-para)
			(progn
			    (insert-string "{\\plain \\li720 \\f4 \\fs16\\lang1033 ")
			    (setq ~in-para 1)
			)
		    )
		    (setq ~start-col (current-column))
		    (save-excursion
			(end-of-line)
			(setq ~in-para (= (- (current-column) ~start-col) 70))
		    )
		    (insert-string ".") (delete-white-space) (delete-previous-character)
		    (next-line) (beginning-of-line)
		    (if (! ~in-para)
			(progn
			    (insert-string " \\par\\pard} ")
			)
		    )
		)
	    )
	)
	;
	; make all command names that appear in the text be links to the topics
	; 
	(pop-to-buffer "cvt-cmd-ref")
	(beginning-of-file)
	(while
	    (!
		(error-occurred
		    (re-search-forward
			"uldb \\([a-zA-Z0-9_][-a-zA-Z0-9_]*\\)}.*\\(cmd_.*\\)}")))
	    (region-around-match 1)
	    (sit-for 0)
	    (setq ~name (region-to-string))
	    (region-around-match 2)
	    (setq ~var (region-to-string))
	    ; exclude some far to common names
	    (if (& (!= ~name "set") (!= ~name "if"))
		(save-excursion
		    (temp-use-buffer "cvt-to-hlp")
		    (beginning-of-file)
		    (error-occurred
			(re-replace-string
			    (concat "\\b" ~name "\\b")
			    (concat "{\\\\uldb " ~name "}{\\\\v " ~var "}")
			)
		    )
		)
	    )
	)
	;
	; make all variable names that appear in the links to the topics
	; 
	(pop-to-buffer "cvt-var-ref")
	(beginning-of-file)
	(while
	    (!
		(error-occurred
		    (re-search-forward
			"uldb \\([-a-zA-Z0-9_]*\\)}.*\\(var_.*\\)}")))
	    (region-around-match 1)
	    (sit-for 0)
	    (setq ~name (region-to-string))
	    (region-around-match 2)
	    (setq ~var (region-to-string))
	    (save-excursion
		(temp-use-buffer "cvt-to-hlp")
		(beginning-of-file)
		(error-occurred
		    (re-replace-string
			(concat "\\b" ~name "\\b")
			(concat "{\\\\uldb " ~name "}{\\\\v " ~var "}")
		    )
		)
	    )
	)
	(pop-to-buffer "cvt-to-hlp")
	(beginning-of-file)
	(replace-string "\177X" "")
	(beginning-of-file)
	(insert-file "..\\help\\hlp_head.rtf")
	(end-of-file)
	(insert-string "\\page {#{\\footnote ref_variables}}\n")
	(insert-string "\\f4 \\fs16\n")
	(yank-buffer "cvt-var-ref")
	(insert-string "\\page {#{\\footnote ref_commands}}\n")
	(insert-string "\\f4 \\fs16\n")
	(yank-buffer "cvt-cmd-ref")
	(insert-string "\\page}\n")
	(write-named-file "em_desc.rtf")
    )
)
(defun ~cvt-setup-buffer (~name)
    (switch-to-buffer ~name)
    (erase-buffer)
    (setq current-buffer-journalled 0)
    (setq current-buffer-checkpointable 0)
    (setq case-fold-search 0)
    (setq syntax-colouring 0)
    (setq syntax-array 0)
)
(defun ~cvt-name-to-var(~name)
    (save-excursion ~c ~new-c
	(temp-use-buffer "cvt-tmp")
	(erase-buffer)
	(insert-string ~name)
	(beginning-of-file)
	(while (! (eobp))
	    (setq ~c (following-char))
	    (delete-next-character)
	    (setq ~new-c "")
	    (if
		(= ~c '-') (setq ~new-c "__")
		(|
		    (& (>= ~c 'A') (<= ~c 'Z'))
		    (& (>= ~c '0') (<= ~c '9'))
		    (& (>= ~c 'a') (<= ~c 'z'))
		    (= ~c '_')
		)
		(setq ~new-c (char-to-string ~c))
		(setq ~new-c (concat "_" ~c))
	    )
	    (insert-string ~new-c)
	)
	(error-occurred (re-replace-string "-" "_"))
	
	(beginning-of-file) (set-mark)
	(end-of-file) (region-to-string)
    )   
)
(defun ~cvt-add-footnotes
    (~name ~var ~tag ~topic-tag)
    (save-excursion
	(temp-use-buffer "cvt-tmp")
	(erase-buffer)
	(insert-string ~name)
	(beginning-of-file)
    )
    (insert-string "\\page {#{\\footnote " ~tag ~var "}")
    (insert-string "K{\\footnote " ~topic-tag " \177X" ~name "}")
    (if (save-excursion (temp-use-buffer "cvt-tmp") (looking-at ".*buffer"))
	(insert-string "K{\\footnote Buffer " ~topic-tag "s}"))
    (if (save-excursion (temp-use-buffer "cvt-tmp") (looking-at ".*file"))
	(insert-string "K{\\footnote File " ~topic-tag "s}"))
    (if (save-excursion (temp-use-buffer "cvt-tmp") (looking-at ".*abbrev"))
	(insert-string "K{\\footnote Abbreviation " ~topic-tag "s}"))
    (if (save-excursion (temp-use-buffer "cvt-tmp") (looking-at ".*word"))
	(insert-string "K{\\footnote Word " ~topic-tag "s}"))
    (if (save-excursion (temp-use-buffer "cvt-tmp") (looking-at ".*para"))
	(insert-string "K{\\footnote Paragraph " ~topic-tag "s}"))
    (if (save-excursion (temp-use-buffer "cvt-tmp") (looking-at ".*char"))
	(insert-string "K{\\footnote Character " ~topic-tag "s}"))
    (if (save-excursion (temp-use-buffer "cvt-tmp") (looking-at ".*window"))
	(insert-string "K{\\footnote Window " ~topic-tag "s}"))
    (if (save-excursion (temp-use-buffer "cvt-tmp") (looking-at ".*key"))
	(insert-string "K{\\footnote  Key " ~topic-tag "s}"))
    (if (save-excursion (temp-use-buffer "cvt-tmp") (looking-at ".*syntax"))
	(insert-string "K{\\footnote Syntax " ~topic-tag "s}"))
    (if (save-excursion (temp-use-buffer "cvt-tmp") (looking-at ".*line"))
	(insert-string "K{\\footnote Line " ~topic-tag "s}"))
    (insert-string "${\\footnote " ~topic-tag " \177X" ~name "}")
    (insert-string "}\n")
)
